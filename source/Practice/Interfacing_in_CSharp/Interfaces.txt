An interface contains definitions for a group of related functionalities that a non-abstract class or a struct must implement. 
An interface may define static methods, which must have an implementation.

By using interfaces, you can, for example, include behavior from multiple sources in a class. 
That capability is important in C# because the language doesn't support multiple inheritance of classes. 
In addition, you must use an interface if you want to simulate inheritance for structs, 
because they can't actually inherit from another struct or class.

By convention, interface names begin with a capital I. EX: ICountable, IEnnumarable, IClonable

A class or struct can implement multiple interfaces, but a class can only inherit from a single class.

Interfaces can contain instance methods, properties, events, indexers, or any combination of those four member types. 
Interfaces may contain static constructors, fields, constants, or operators. 
An interface can't contain instance fields, instance constructors, or finalizers. 
Interface members are public by default, and you can explicitly specify accessibility modifiers, 
such as public, protected, internal, private, protected internal, or private protected. 
A private member must have a default implementation.

To implement an interface member, the corresponding member of the implementing class must be public, non-static, 
and have the same name and signature as the interface member.

When a class or struct implements an interface, the class or struct must provide an implementation for all of 
the members that the interface declares but doesn't provide a default implementation for. 
However, if a base class implements an interface, any class that's derived from the base class inherits that implementation.
