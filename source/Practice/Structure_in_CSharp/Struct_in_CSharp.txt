
In C#, struct is the value type data type that represents data structures. 
It can contain a parameterized constructor, static constructor, constants, fields, methods, properties, indexers, operators, events, and nested types.

A structure type (or struct type) is a value type that can encapsulate data and related functionality. 
You use the "struct" keyword to define a structure type:

public struct Coords
{
    public double X { get; }
    public double Y { get; }

    public Coords(double x, double y)
    {
        X = x;
        Y = y;
    }

    public override string ToString() => $"({X}, {Y})";
}

A struct object can be created with or without the new operator, same as primitive type variables.

**Typically, you use structure types to design small data-centric types that provide little or no behavior.

you can also use the readonly modifier to declare that an instance member doesn't modify the state of a struct.


If you can't declare the whole structure type as readonly, use the readonly modifier to mark the instance members that don't modify the state of the struct

Within a readonly instance member, you can't assign to structure's instance fields. However, a readonly member can call a non-readonly member. 
In that case the compiler creates a copy of the structure instance and calls the non-readonly member on that copy.

You can't apply the readonly modifier to static members of a structure type.

##Limitations with the design of a structure type

When you design a structure type, you have the same capabilities as with a class type, with the following exceptions:

You can't declare a parameterless constructor. Every structure type already provides an implicit parameterless constructor that produces the default value of the type.

You can't initialize an instance field or property at its declaration. However, you can initialize a static or const field or a static property at its declaration.

A constructor of a structure type must initialize all instance fields of the type.

A structure type can't inherit from other class or structure type and it can't be the base of a class. However, a structure type can implement interfaces.

You can't declare a finalizer within a structure type.


https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct#instantiation-of-a-structure-type
