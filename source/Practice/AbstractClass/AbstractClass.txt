->	An abstract class is an incomplete class or special class we can't be instantiated. 
	The purpose of an abstract class is to provide a blueprint for derived classes and 
	set some rules what the derived classes must implement when they inherit an abstract class.

->	We can use an abstract class as a base class and all derived classes must implement abstract definitions.
	An abstract method must be implemented in all non-abstract classes using the override keyword.
	After overriding the abstract method is in the non-Abstract class.
	We can derive this class in another class and again we can override the same abstract method with it.

->	C# Abstract Class Features
	>	An abstract class can inherit from a class and one or more interfaces.
	>	An abstract class can implement code with non-Abstract methods.
	>	An Abstract class can have modifiers for methods, properties etc.
	>	An Abstract class can have constants and fields.
	>	An abstract class can implement a property.
	>	An abstract class can have constructors or destructors.
	>	An abstract class cannot be inherited from by structures.
	>	An abstract class cannot support multiple inheritance.



***	An abstract class is used if you want to provide a common, implemented functionality among all the implementations of the component.

	An abstract class allows you to create functionality that subclasses can implement or override. 
	An interface only allows you to define functionality, not implement it. And whereas a class can extend only one abstract class, 
	it can take advantage of multiple interfaces.


An abstract class must be inherited by a class that provides an implementation of the abstract methods or properties.