The delegate is a reference type data type that defines the method signature. 
You can define variables of delegate, just like other data type, that can refer to any method with the same signature as the delegate.

There are three steps involved while working with delegates:

Declare a delegate
Set a target method
Invoke a delegate
A delegate can be declared using the delegate keyword followed by a function signature,

=>	Important Points About Delegates: 

-	Provides a good way to encapsulate the methods.
-	Delegates are the library class in System namespace.
-	These are the type-safe pointer of any method.
-	Delegates are mainly used in implementing the call-back methods and events.
-	Delegates can be chained together as two or more methods can be called on a single event.
-	It doesn’t care about the class of the object that it references.
-	Delegates can also be used in “anonymous methods” invocation.
-	Anonymous Methods(C# 2.0) and Lambda expressions(C# 3.0) are compiled to delegate types in certain contexts. 
-	Sometimes, these features together are known as anonymous functions.


[modifier] delegate [return_type] [delegate_name] ([parameter_list]);


--	modifier: It is the required modifier which defines the access of delegate and it is optional to use.
--	delegate: It is the keyword which is used to define the delegate.
--	return_type: It is the type of value returned by the methods which the delegate will be going to call. It can be void. 
	A method must have the same return type as the delegate.
--	delegate_name: It is the user-defined name or identifier for the delegate.
--	parameter_list: This contains the parameters which are required by the method when called through the delegate.


==========================================================================================================================

Generic Delegate
A generic delegate can be defined the same way as a delegate but using generic type parameters or return type. 
The generic type must be specified when you set a target method.
