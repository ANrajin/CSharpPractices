### SOLID Principles

SOLID principles are the design principles that enable us to manage most of the software design problems. 
Robert C. Martin compiled these principles in the 1990s. 
These principles provide us with ways to move from tightly coupled code and little encapsulation to the desired results of 
loosely coupled and encapsulated real needs of a business properly. SOLID is an acronym of the following.


S: Single Responsibility Principle (SRP)
O: Open closed Principle (OCP)
L: Liskov substitution Principle (LSP)
I: Interface Segregation Principle (ISP)
D: Dependency Inversion Principle (DIP)

** S: Single Responsibility Principle (SRP)
 
SRP says "Every software module should have only one reason to change".
 
This means that every class, or similar structure, in your code should have only one job to do. 
Everything in that class should be related to a single purpose. Our class should not be like a Swiss 
knife wherein if one of them needs to be changed then the entire tool needs to be altered. 
It does not mean that your classes should only contain one method or property. There may be 
many members as long as they relate to single responsibility.
 
The Single Responsibility Principle gives us a good way of identifying classes at the design phase of an application 
and it makes you think of all the ways a class can change. A good separation of responsibilities is done only when we 
have the full picture of how the application should work. Let us check this with an example.
